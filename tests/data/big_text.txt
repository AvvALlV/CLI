Haddock
Haddock is the automatic documentation tool for Haskell source code. It integrates with the usual cabal toolchain.
-- | Documentation for f
f :: a -> a
f = ...
-- | Multiline documentation for the function
-- f with multiple arguments.
fmap :: Functor f =>
=> (a -> b) -- ^ function
-> f a -- ^ input
-> f b -- ^ output
data T a b
= A a -- ^ Documentation for A
| B b -- ^ Documentation for B
Elements within a module (value, types, classes) can be hyperlinked by enclosing
the identifier in single quotes.
data T a b
= A a -- ^ Documentation for 'A'
| B b -- ^ Documentation for 'B'
Modules themselves can be referenced by enclosing them in double quotes.
-- | Here we use the "Data.Text" library and import
-- the 'Data.Text.pack' function.
-- | An example of a code block.
--
-- @
-- f x = f (f x)
-- @
-- > f x = f (f x)
-- | Example of an interactive shell session.
--
-- >>> factorial 5
-- 120
Headers for specific blocks can be added by prefacing the comment in the module
block with a star:
module Foo (
-- * My Header
example1,
Monads
Eightfold Path to Monad Satori
Much ink has been spilled waxing lyrical about the supposed mystique of monads. Instead I suggest a path to enlightenment:
1. Don’t read the monad tutorials.
2. No really, don’t read the monad tutorials.
3. Learn about Haskell types.
4. Learn what a typeclass is.
30
5. Read the Typeclassopedia.
6. Read the monad definitions.
7. Use monads in real code.
8. Don’t write monad-analogy tutorials.
In other words, the only path to understanding monads is to read the fine source,
fire up GHC and write some code. Analogies and metaphors will not lead to
understanding.